apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.jetbrains.dokka'

//apply plugin: 'org.jetbrains.dokka-android'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId 'com.cn.lxz.kotlinandroid'
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation parent.ext.libs.appcompat
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
//    compile 'com.jakewharton:kotterknife:0.1.0-SNAPSHOT'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.1.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'
    implementation project(':AsHttp')
//    implementation 'com.android.support:recyclerview-v7:26+'
//    implementation 'io.requery:requery:1.3.0'
//    implementation 'io.requery:requery-android:1.3.0'
//    implementation 'io.requery:requery-kotlin:1.3.0'
    kapt 'io.requery:requery-processor:1.3.0'
    compile project(':kotlinlibrary')

}


repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven { url 'https://jitpack.io' }
}




task generateSourcesJar(type: Jar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir
}

task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives generateJavadoc
    archives generateSourcesJar
}