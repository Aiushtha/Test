apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion 27
    buildToolsVersion '28.0.0 rc1'

    defaultConfig {
        minSdkVersion rootProject.ext.MIN_SDK_VERSION
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile rootProject.ext.dependencies.appCompat
    testCompile 'junit:junit:4.12'
    compile 'io.reactivex.rxjava2:rxkotlin:2.1.0'
    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    compile 'io.requery:requery:1.3.0'
    compile 'io.requery:requery-android:1.3.0'
    compile 'io.requery:requery-kotlin:1.3.0'
    compile project(':AsHttp')
    compile 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'
    kapt 'io.requery:requery-processor:1.3.0'
    //    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'
}
repositories {
    jcenter()
}
allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven { url 'https://www.jitpack.io' }
    }
}


/**
 * https://github.com/Kotlin/dokka ./gradlew dokka
 * */

//dokka {
//    moduleName = 'data'
//    outputFormat = 'html'
//    outputDirectory = "$buildDir/javadoc"
//
//    // These tasks will be used to determine source directories and classpath
////    kotlinTasks {
////        defaultKotlinTasks() + [':some:otherCompileKotlin', project("another").compileKotlin]
////    }
////
////    // List of files with module and package documentation
////    // http://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation
////    includes = ['packages.md', 'extra.md']
////
////    // The list of files or directories containing sample code (referenced with @sample tags)
//    samples = ['samples/basic.kt', 'samples/advanced.kt']
////
////    jdkVersion = 6 // Used for linking to JDK
////
////    // Use default or set to custom path to cache directory
////    // to enable package-list caching
////    // When set to default, caches stored in $USER_HOME/.cache/dokka
////    cacheRoot = 'default'
////
////
////
////    // Do not output deprecated members. Applies globally, can be overridden by packageOptions
////    skipDeprecated = false
////
////    // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
////    reportNotDocumented = true
////
////    skipEmptyPackages = true // Do not create index pages for empty packages
////
////    impliedPlatforms = ["JVM"] // See platforms section of documentation
////
////    // Manual adding files to classpath
////    // This property not overrides classpath collected from kotlinTasks but appends to it
////    classpath = [new File("$buildDir/other.jar")]
//
//    // By default, sourceRoots is taken from kotlinTasks, following roots will be appended to it
//    // Short form sourceRoots
////    sourceDirs = files('src/main/com/lxz/kotlin/tools')
//
////    // By default, sourceRoots is taken from kotlinTasks, following roots will be appended to it
////    // Full form sourceRoot declaration
////    // Repeat for multiple sourceRoots
////    sourceRoot {
////        // Path to source root
////        path = "src/main/com/lxz/kotlin/tools'"
////        // See platforms section of documentation
////        platforms = ["JVM"]
////    }
//
//    // Specifies the location of the project source code on the Web.
//    // If provided, Dokka generates "source" links for each declaration.
//    // Repeat for multiple mappings
//    linkMapping {
//        // Source directory
//        dir = "src/main/com/lxz/kotlin/tools"
//
//        // URL showing where the source code can be accessed through the web browser
//        url = "https://github.com/cy6erGn0m/vertx3-lang-kotlin/blob/master/src/main/kotlin"
//
//        // Suffix which is used to append the line number to the URL. Use #L for GitHub
//        suffix = "#L"
//    }
//
////    // No default documentation link to kotlin-stdlib
////    noStdlibLink = false
////
////    // Allows linking to documentation of the project's dependencies (generated with Javadoc or Dokka)
////    // Repeat for multiple links
////    externalDocumentationLink {
////        // Root URL of the generated documentation to link with. The trailing slash is required!
////        url = new URL("https://example.com/docs/")
////
////        // If package-list file located in non-standard location
////        // packageListUrl = new URL("file:///home/user/localdocs/package-list")
////    }
////
////    // Allows to customize documentation generation options on a per-package basis
////    // Repeat for multiple packageOptions
////    packageOptions {
////        prefix = "kotlin" // will match kotlin and all sub-packages of it
////        // All options are optional, default values are below:
////        skipDeprecated = false
////        reportUndocumented = true // Emit warnings about not documented members
////        includeNonPublic = false
////    }
//}

//
//task generateSourcesJar(type: Jar) {
//    group = 'jar'
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
////task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
////    outputFormat = "javadoc"
////    outputDirectory = javadoc.destinationDir
////}
//
//task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
//    group = 'jar'
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives generateJavadoc
//    archives generateSourcesJar
//}